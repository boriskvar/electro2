import './bootstrap';

// === Breeze (Alpine.js) ===
import Alpine from 'alpinejs';
window.Alpine = Alpine;
Alpine.start();

// === Vue.js ===
import { createApp } from 'vue';
import Product from './components/Product.vue';
import QuickViewModal from './components/QuickViewModal.vue';

// üìå –ú–∞–≥–∞–∑–∏–Ω (Vue –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ #app –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ API)
if (document.getElementById('app')) {
    const app = createApp({
        components: { Product, QuickViewModal },
        data() {
            return {
                products: [] // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
            };
        },
        mounted() {
            this.loadProducts(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        },
        methods: {
            loadProducts() {
                fetch('/api/products')
                    .then(response => response.json())
                    .then(data => {
                        this.products = data.data; // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error));
            }
        }
    });

    // üìå –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    app.component('products', Product);
    app.component('quick-view-modal', QuickViewModal);

    app.mount('#app');
}

// === Wishlist ===
document.addEventListener('DOMContentLoaded', function () {
    console.log('–°–∫—Ä–∏–ø—Ç wishlist –∑–∞–≥—Ä—É–∂–µ–Ω');

    document.addEventListener('click', function (e) {
        const button = e.target.closest('.add-to-wishlist');
        if (!button) return;

        e.preventDefault();

        const productId = button.dataset.id;
        const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

        console.log('–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π –ø—Ä–æ–¥—É–∫—Ç —Å ID:', productId);

        fetch('/my-account/wishlist/store', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token,
                'Accept': 'application/json',
            },
            body: JSON.stringify({ product_id: productId }),
        })
            .then((response) => {
                if (response.status === 401) {
                    window.location.href = '/login?wishlist_product_id=' + productId;
                    throw new Error('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                }
                return response.json();
            })
            .then((data) => {
                if (!data) return;

                if (data.success) {
                    alert(data.message || '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π!');

                    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
                    button.classList.add('disabled');
                    button.style.pointerEvents = 'none';
                    button.style.opacity = '0.5';

                } else {
                    alert('–û—à–∏–±–∫–∞: ' + (data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ Wishlist'));
                }
            })
            .catch((error) => {
                if (error.message === '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') return;

                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ wishlist:', error);
                window.dispatchEvent(
                    new CustomEvent('showToast', {
                        detail: { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Wishlist', type: 'error' },
                    })
                );
            });
    });
});


// === Compare ===
document.addEventListener('DOMContentLoaded', function () {
    console.log('–°–∫—Ä–∏–ø—Ç compare –∑–∞–≥—Ä—É–∂–µ–Ω');

    document.addEventListener('click', function (e) {
        const button = e.target.closest('.add-to-compare');

        if (!button) return;

        e.preventDefault();
        const productId = button.dataset.id;
        const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

        console.log('–î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç —Å ID:', productId);
        console.log('ID —Ç–æ–≤–∞—Ä–∞:', productId);

        fetch('/my-account/compare/add', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token,
                'Accept': 'application/json',
            },
            body: JSON.stringify({ product_id: productId }),
        })
            .then((response) => {
                if (response.status === 401) {
                    window.location.href = '/login?compare_product_id=' + productId;
                    throw new Error('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                }
                return response.json();
            })
            .then((data) => {
                if (!data) return;

                if (data.success) {
                    alert(data.message || '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π!');

                    // –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É
                    button.classList.add('disabled');
                    button.style.pointerEvents = 'none';
                    button.style.opacity = '0.5';

                } else {
                    alert('–û—à–∏–±–∫–∞: ' + (data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ'));
                }
            })
            .catch((error) => {
                if (error.message === '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') return;

                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ:', error);
                window.dispatchEvent(
                    new CustomEvent('showToast', {
                        detail: { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ', type: 'error' },
                    })
                );
            });
    });
});

