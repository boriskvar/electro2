import './bootstrap';

// === Breeze (Alpine.js) ===
import Alpine from 'alpinejs';
window.Alpine = Alpine;
Alpine.start();

// === Vue.js ===
import { createApp } from 'vue';
import Product from './components/Product.vue';
import QuickViewModal from './components/QuickViewModal.vue';

// üìå –ú–∞–≥–∞–∑–∏–Ω (Vue –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ #app –∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã —á–µ—Ä–µ–∑ API)
if (document.getElementById('app')) {
    const app = createApp({
        components: { Product, QuickViewModal },
        data() {
            return {
                products: [] // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
            };
        },
        mounted() {
            this.loadProducts(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        },
        methods: {
            loadProducts() {
                fetch('/api/products')
                    .then(response => response.json())
                    .then(data => {
                        this.products = data.data; // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã
                    })
                    .catch(error => console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', error));
            }
        }
    });

    // üìå –ì–ª–æ–±–∞–ª—å–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    app.component('products', Product);
    app.component('quick-view-modal', QuickViewModal);

    app.mount('#app');
}

// üìå Wishlist (Vue –º–æ–Ω—Ç–∏—Ä—É–µ—Ç—Å—è –Ω–∞ #wishlist-products –∏ –ø–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Laravel)
/* if (document.getElementById('wishlist-products')) {
    const wishlistApp = createApp({
        components: { Product },
        data() {
            return {
                products: []
            };
        },
        mounted() {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Laravel
            const element = document.getElementById('wishlist-products');
            this.products = JSON.parse(element.dataset.products);
        }
    });

    wishlistApp.mount('#wishlist-products');
} */

// === Wishlist ===
/* document.addEventListener('DOMContentLoaded', function () {
    console.log('–°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');

    const tabsContainer = document.querySelector('.products-tabs');
    if (tabsContainer) {
        tabsContainer.addEventListener('click', function (e) {
            if (e.target.closest('.add-to-wishlist')) {
                e.preventDefault();

                const button = e.target.closest('.add-to-wishlist');
                const productId = button.dataset.id;
                const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

                fetch('/my-account/wishlist/store', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': token,
                        'Accept': 'application/json',
                    },
                    body: JSON.stringify({ product_id: productId }),
                })
                    .then((response) => {
                        if (response.status === 401) {
                            window.location.href = '/login?wishlist_product_id=' + productId;
                            throw new Error('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                        }
                        return response.json();
                    })
                    .then((data) => {
                        if (!data) return;

                        if (data.success) {
                            alert(data.message || '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π!');
                            button.innerHTML = '<i class="fa fa-heart-o"></i> added';
                            button.classList.add('disabled');
                        } else {
                            alert('–û—à–∏–±–∫–∞: ' + (data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ Wishlist'));
                        }
                    })
                    .catch((error) => {
                        if (error.message === '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') return; // –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ

                        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ wishlist:', error);
                        window.dispatchEvent(
                            new CustomEvent('showToast', {
                                detail: { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Wishlist', type: 'error' },
                            })
                        );
                    });

            }
        });
    }
}); */

// === Wishlist ===
document.addEventListener('DOMContentLoaded', function () {
    console.log('–°–∫—Ä–∏–ø—Ç wishlist –∑–∞–≥—Ä—É–∂–µ–Ω');

    document.addEventListener('click', function (e) {
        const button = e.target.closest('.add-to-wishlist');
        if (!button) return;

        e.preventDefault();

        const productId = button.dataset.id;
        const token = document.querySelector('meta[name="csrf-token"]').getAttribute('content');

        fetch('/my-account/wishlist/store', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-TOKEN': token,
                'Accept': 'application/json',
            },
            body: JSON.stringify({ product_id: productId }),
        })
            .then((response) => {
                if (response.status === 401) {
                    window.location.href = '/login?wishlist_product_id=' + productId;
                    throw new Error('–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
                }
                return response.json();
            })
            .then((data) => {
                if (!data) return;

                if (data.success) {
                    alert(data.message || '–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π!');
                    button.innerHTML = '<i class="fa fa-heart-o"></i> added';
                    button.classList.add('disabled');
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + (data.message || '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –≤ Wishlist'));
                }
            })
            .catch((error) => {
                if (error.message === '–ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω') return;

                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ wishlist:', error);
                window.dispatchEvent(
                    new CustomEvent('showToast', {
                        detail: { message: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ Wishlist', type: 'error' },
                    })
                );
            });
    });
});

